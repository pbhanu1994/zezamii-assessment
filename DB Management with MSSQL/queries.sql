-- 1. Database Design

-- Tables for `Products`, `Orders`, `OrderItems`, `Customers`.
-- Products table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY IDENTITY(1,1),
    ProductName NVARCHAR(100) NOT NULL,
    Price DECIMAL(10, 2) NOT NULL,
);

-- Create Customers table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY IDENTITY(1,1),
    CustomerName NVARCHAR(100) NOT NULL,
    Email NVARCHAR(100),
    Phone NVARCHAR(15)
);

-- Orders table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY IDENTITY(1,1),
    OrderDate DATETIME NOT NULL DEFAULT GETDATE(),
    CustomerID INT,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- OrderItems table
CREATE TABLE OrderItems (
    OrderItemID INT PRIMARY KEY IDENTITY(1,1),
    OrderID INT,
    ProductID INT,
    Quantity INT NOT NULL,
    UnitPrice DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

----------------------------------------------------------
-- 2. SQL Queries

-- 1. Retrieve all orders and their associated customer details:
SELECT 
    o.OrderID, 
    o.OrderDate, 
    c.CustomerID, 
    c.CustomerName, 
    c.Email, 
    c.Phone
FROM 
    Orders o
JOIN 
    Customers c ON o.CustomerID = c.CustomerID;

-- 2. Retrieve a list of products not ordered in the last 30 days.
SELECT 
    p.ProductID, 
    p.ProductName, 
    p.Price
FROM 
    Products p
LEFT JOIN 
    OrderItems oi ON p.ProductID = oi.ProductID
LEFT JOIN 
    Orders o ON oi.OrderID = o.OrderID
GROUP BY 
    p.ProductID, 
    p.ProductName, 
    p.Price
HAVING 
    MAX(o.OrderDate) IS NULL
    OR MAX(o.OrderDate) < DATEADD(DAY, -30, GETDATE()); 

-- 3. Update a productâ€™s price and reflect that change in current orders:
-- updating the new price (99.99) of the product (productId 1)
UPDATE Products
SET Price = 99.99
WHERE ProductID = 1;
-- updating the UnitPrice in all orders where the product is included
UPDATE OrderItems
SET UnitPrice = 99.99
WHERE ProductID = 1;

-------------------------------------------------------------------
-- 3. Stored Procedures

--Create a stored procedure to return a customer's order history with product details:
CREATE PROCEDURE GetCustomerOrderHistory
    @CustomerID INT
AS
BEGIN
    SELECT 
        o.OrderID, 
        o.OrderDate, 
        p.ProductName, 
        oi.Quantity, 
        oi.UnitPrice
    FROM 
        Orders o
    JOIN 
        OrderItems oi ON o.OrderID = oi.OrderID
    JOIN 
        Products p ON oi.ProductID = p.ProductID
    WHERE 
        o.CustomerID = @CustomerID;
END;

--------------------------------------------------------------
-- Bonus: Write a query that returns the total revenue generated by each customer.
SELECT 
    c.CustomerID, 
    c.CustomerName, 
    SUM(oi.Quantity * oi.UnitPrice) AS TotalRevenue
FROM 
    Orders o
JOIN 
    Customers c ON o.CustomerID = c.CustomerID
JOIN 
    OrderItems oi ON o.OrderID = oi.OrderID
GROUP BY 
    c.CustomerID, 
    c.CustomerName;
